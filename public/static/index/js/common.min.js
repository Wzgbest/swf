function BrowserType() {
    var userAgent = navigator.userAgent;
    var isOpera = userAgent.indexOf("Opera") > -1;
    var isEdge = userAgent.indexOf("Edge") > -1;
    var isFF = userAgent.indexOf("Firefox") > -1;
    var isSafari = userAgent.indexOf("Safari") > -1 && userAgent.indexOf("Chrome") === -1;
    var isChrome = userAgent.indexOf("Chrome") > -1 && userAgent.indexOf("Safari") > -1;
    if (!!window.ActiveXObject || "ActiveXObject" in window) return "IE";
    if (isFF) return "FF";
    if (isOpera) return "Opera";
    if (isSafari) return "Safari";
    if (isChrome && !isEdge) return "Chrome";
    if (isEdge) return "Edge"
}

function isIE() {
    return !-[1,]
}

function getEvent() {
    if (window.event) {
        return window.event
    }
    func = getEvent.caller;
    while (func !== null) {
        var arg0 = func.arguments[0];
        if (arg0) {
            if ((arg0.constructor === Event || arg0.constructor === MouseEvent || arg0.constructor === KeyboardEvent) || (typeof(arg0) === "object" && arg0.preventDefault && arg0.stopPropagation)) {
                return arg0
            }
        }
        func = func.caller
    }
    return null
}

function cancelBubble() {
    var e = getEvent();
    if (window.event) {
        e.cancelBubble = !0
    } else if (e.preventDefault) {
        e.stopPropagation()
    }
}

function saveScenes(status_complete, scenes, temp_id, callback, new_content) {
    var postData = {'status_complete': status_complete, 'scenes': scenes, 'temp_id': temp_id};
    if (new_content !== undefined) {
        postData.new_content = new_content
    }
    $.post('/member/video/saveScenes', postData, function (response) {
        callback(response)
    }, 'json')
}

function cmpObj(x, y) {
    if (x === y) {
        return !0
    }
    if (!(x instanceof Object) || !(y instanceof Object)) {
        return !1
    }
    if (x.constructor !== y.constructor) {
        return !1
    }
    for (var p in x) {
        if (x.hasOwnProperty(p)) {
            if (!y.hasOwnProperty(p)) {
                return !1
            }
            if (x[p] === y[p]) {
                continue
            }
            if (typeof(x[p]) !== "object") {
                return !1
            }
            if (!Object.equals(x[p], y[p])) {
                return !1
            }
        }
    }
    for (p in y) {
        if (y.hasOwnProperty(p) && !x.hasOwnProperty(p)) {
            return !1
        }
    }
    return !0
}

function floatObj(x) {
    for (var p in x) {
        x[p] = parseFloat(x[p])
    }
}

function getByteLen(val) {
    var len = 0;
    for (var i = 0; i < val.length; i++) {
        if (val[i].match(/[^\x00-\xff]/ig) !== null)
            len += 2; else len += 1
    }
    return len
}

function byteCut(val, len) {
    var new_val = val;
    var tmp_len = 0;
    for (var i = 0; i < val.length; i++) {
        if (val[i].match(/[^\x00-\xff]/ig) !== null) {
            tmp_len += 2
        }
        else {
            tmp_len += 1
        }
        if (tmp_len > len) {
            new_val = val.substring(0, i);
            break
        }
    }
    return new_val
}

function GetRequest() {
    var url = location.search;
    var theRequest = {};
    if (url.indexOf("?") !== -1) {
        var str = url.substr(1);
        strs = str.split("&");
        for (var i = 0; i < strs.length; i++) {
            theRequest[strs[i].split("=")[0]] = strs[i].split("=")[1]
        }
    }
    return theRequest
}

function SetRequest(obj) {
    var result = '';
    var split = '';
    if (typeof obj !== 'object') {
        return result
    }
    for (var key in obj) {
        result += split + key + '=' + obj[key];
        split = '&'
    }
    return result
}