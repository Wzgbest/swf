<?php
/**
 * // +----------------------------------------------------------------------
 * // | 全心服务 影响未来
 * // +----------------------------------------------------------------------
 * // | Copyright (c) 2018 www.7192.com All rights reserved.
 * // +----------------------------------------------------------------------
 * // | Author: wuzhenguo <wuzhenguook@gmail.com> <The Best Word!!!>
 * // +----------------------------------------------------------------------
 */

/**
 * Created by PhpStorm.
 * User: QYIT
 * Date: 2018/3/5
 * Time: 16:19
 */

namespace app\index\controller;


use app\admin\model\CatesModel;
use app\admin\model\CodeModel;
use app\index\model\Template;
use think\Controller;
use app\index\model\Member as MemberModel;
use think\Db;

class Member extends Controller
{
    protected $uid;

    protected function _initialize()
    {
        $account = getUserByCooki("custom");
        if ($account) {
            $info = explode('_',$account);
            $this->assign('name',$info[1]);
            $this->uid = $info[0];
        }
        $cate = new CatesModel();
        $cates = $cate->getAllCates(['status'=>0]);
        $this->assign('cates',$cates);
        $this->assign('account',$account);
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {
        $cate = input('cate',0,'int');
        $status = input('status',0,'int');
        $keyword = input('keywords','','string');
        $page = input('page',1,'int');
        $tem = new Template();

        //数据查询
        if ($status == 0)
        {
            $map = [0,1];
        }else if ($status == 1){
            $map = [5,6];
        }else if ($status == 2){
            $map = [3,4];
        }
        $where = [];
        if ($cate){
            $where['pr.cate'] = $cate;
        }
        if (!empty($keyword)){
            $where['vedio_name'] = ['like',$keyword.'%'];
        }
        $limit = '11';
        $my_list = $tem->getUserTemplate($this->uid,$map,$where,$limit);

        //分类输出
        $cateM = new CatesModel();
        $cates = $cateM->getAllCates(['pid'=>0]);
        if ($status == 2){
            foreach ($cates as $k=>$v){
                $num = $tem->getCountByCateAndUser($this->uid,$v['id']);
                $cates[$k]['count'] = $num;
            }
        }
        //分页
        $this->assign('cates',$cates);
        $this->assign('lists',$my_list);
        $this->assign('status',$status);
        $this->assign('cate',$cate);
        return view('user');
    }

    /**
     * 用户添加作品
     */
    public function mvAdd()
    {
        $id = input('id',0,'int');
        $new = input('new',0,'int');
        $tem = new Template();
        $model = $tem->getTemplateById($id);
//        $num = $tem->getEditNumByModelId($id);
//        $num['img_num'] = array_sum($num['img_num']);
//        $num['text_num'] = array_sum($num['text_num']);

        if ($new) {
            $result = '';
            $account = getUserByCooki("custom");
            if ($account) {
                $info = explode('_',$account);
                $uid = $info[0];
            }
            //查看所有的数据输出到前台
            Db::startTrans();
            try{
                //保存模板到用户的账号下
                $product['userid'] = $uid;
                $product['modelid'] = $id;
                $product['create_time'] = time();
                $product['update_time'] = time();
                $product['cate'] = $model['cate'];
                $productid = $tem->saveProduct($product);
                if (!$productid) {
                    $result = '保存用户模板失败';
                    exception("保存用户模板失败");
                }
                $model_scene = $tem->getImagesAndTextByModelId($id);
                $images = $model_scene['images'];
                $text = $model_scene['text'];
                if (!empty($images)) {
                    $image['productid'] = $productid;
                    $image['userid'] = $uid;
                    foreach ($images as $key=>$value){
                        $image['img'] = $value['img'];
                        $image['create_time'] = time();
                        $image['sceneid'] = $value['sceneid'];
                        $image['sort'] = $value['sort'];
                        $image['width'] = $value['width'];
                        $image['height'] = $value['height'];
                        $data_images[] = $image;
                    }
                    $res = $tem->saveAllImage($data_images);
                    if (!$res){
                        $result = '保存用户默认图片失败';
                        exception("保存用户默认图片失败");
                    }
                }

                if (!empty($text)){
                    foreach ($text as $k=>$item) {
                        $zi = explode(';',$item['text']);
                        $ll['userid'] = $uid;
                        $ll['productid'] = $productid;
                        $ll['sceneid'] = $item['sceneid'];
                        if ($item['text'] != ''){
                            foreach ($zi as $key=>$v) {
                                $ll['text'] = $v;
                                $ll['sort'] = $key + 1;
                                preg_match_all("/./us", $ll['text'], $match);
                                $ll['max'] = count($match[0]);
                                $texts[] = $ll;
                            }
                        }
                    }
                    $res = $tem->saveText($texts);
                    if (!$res){
                        $result = '保存用户默认文字失败';
                        exception("保存用户默认文字失败");
                    }
                }
                Db::commit();
            }catch (\Exception $e){
                Db::rollback();
                return $result;
            }
        }
//        $scenes = $tem->getScenesAndImagesAndTextsByModelId($id,$productid);
//        $this->assign('scenes',$scenes);
//        $this->assign('modelid',$id);
//        $this->assign('productid',$productid);
//        $this->assign('num',$num);
//        $this->assign('model',$model);

        $this->redirect('/index/member/zhizuo',['id'=>$id,'productid'=>$productid]);
    }

    public function zhizuo()
    {
        $id = input('id',0,'int');
        $productid = input('productid',0,'int');

        $tem = new Template();
        $model = $tem->getTemplateById($id);
        $product = $tem->getOneById($productid);
        $num = $tem->getEditNumByModelId($id);
        $num['img_num'] = array_sum($num['img_num']);
        $num['text_num'] = array_sum($num['text_num']);
        $model_scene = $tem->getImagesAndTextByModelId($id);
        $music = $tem->getProductBgm($productid);
        $scenes = $tem->getScenesAndImagesAndTextsByModelId($id,$productid);
        if ($model_scene['images']){
            $defaltimg = [];
            foreach ($model_scene['images'] as $img=>$v){
                $defaltimg[$img] = $v['sceneid'];
            }
        }
        if (!empty($model_scene['text'])){
            foreach ($model_scene['text'] as $k=>$item) {
                $zi = explode(';',$item['text']);
                $ll['sceneid'] = $item['sceneid'];
                if ($item['text'] != ''){
                    foreach ($zi as $key=>$v) {
                        $ll['text'] = $v;
                        $ll['sort'] = $key + 1;
                        $texts[] = $ll;
                    }
                }
            }
        foreach ($scenes as $key=>$value) {
            if (!empty($value['images'])) {
                foreach ($value['images'] as $k=>$v){
                    $img_arr = explode('.',$v['img']);
                    $keyword = array_search($v['sceneid'],$defaltimg);
                    $scenes[$key]['images'][$k]['old_image'] = $model_scene['images'][$keyword]['img'];
                    $scenes[$key]['images'][$k]['thum_img'] = $img_arr[0].'_300200.'.$img_arr[1];
                }
            }
            if (!empty($value['texts']))  {
                foreach ($value['texts'] as $k=>$v){
                    foreach ($texts as $tt){
                        if ($tt['sceneid'] == $v['sceneid'] && $tt['sort'] == $v['sort']) {
                            $scenes[$key]['texts'][$k]['old_text'] = $tt['text'];
                        }
                    }
                }
            }
        }
        }
        $this->assign('scenes',$scenes);
        $this->assign('modelid',$id);
        $this->assign('productid',$productid);
        $this->assign('product',$product);
        $this->assign('num',$num);
        $this->assign('model',$model);
        $this->assign('music',$music);
        return view('zhizuo');
    }

    /**
     * 验证登录
     */
    public function verifyLogin(){
        $req_reg= ["status"=>0,"message"=>"登录失败"];

        $input = input('param.');
        $account = trim($input['account']);
        $psw = trim($input['psw']);
        $code = 123456;
        $ip = $this->request->ip();
        $time = time();
        $result = $this->_checkPasswordAndCode($account,$psw,$code);
        if(!$result["status"]){
            $req_reg["message"] = $result["message"];
            return json($req_reg);
        }
        $userM = new MemberModel();
        $data['logintime'] = $time;
        $data['loginip'] = $ip;
        $flg = $userM->updateUserInfo($result['data']['id'],$data);
        if (!$flg){
            $req_reg["message"] = "保存登录信息失败";
            return json($req_reg);
        }
        setCooki("custom",$result['data']['id']."_".$result['data']['name']);
//        $this->redirect('admin/index/index');
        $req_reg['status'] = 1;
        $req_reg['message'] = "登陆成功";
        return json($req_reg);

    }

    //退出登录
    public function logout(){
        setCooki("custom",null);
        $this->redirect('/');
    }

    /**
     * @param $account
     * @param $password
     * @param $code
     * @return 账号验证
     */
    private function _checkPasswordAndCode($account,$password,$code){
        $info = ['status'=>0,'message'=>"验证失败"];
        if (!$account || !$password || !$code){
            $info['message'] = "信息不能为空";
            return $info;
        }
        $userM = new MemberModel();
        $userInfo = $userM->getUserByName($account);
        if (empty($userInfo)){
            $info['message'] = "没有该用户";
            return $info;
        }
        if (md5($password) != $userInfo['password']){
            $info['message'] = "密码不正确";
            return $info;
        }
//        if(!captcha_check($code)){
//            $info['message'] = "验证码错误";
//            return $info;
//        }
        if (!$userInfo['status']){
            $info['message'] = "您的账号无效，请联系管理员";
            return $info;
        }
        $info['status'] = 1;
        $info['message'] = "验证成功";
        $info['data'] = $userInfo;
        return $info;
    }

    /**
     * 保存场景文字
     */
    public function saveText()
    {
        $result = ['error'=>1,'message'=>"保存失败"];

        $textid = input('id',0,'int');
        $texts = input('text','','string');
//        var_exp($texts);die();
        if (!$textid || !$texts){
            $result['message'] = "参数为空";
            return json($result);
        }
        $tem = new Template();
        $data['text'] = $texts;
        $res = $tem->updateTextByTextId($textid,$data);
        if ($res){
            $result['message'] = "更新成功";
            $result['error'] = 0;
        }

        return json($result);
    }

    /**
     * 保存场景长传图片
     */
    public function saveImage()
    {
        $result = ['status'=>0,'message'=>"上传失败"];
        $img = request()->file('file');
        $img_id = input('img_id',0,'int');
        $edit_crop = input('image');

        $tem = new Template();
        $model = $tem->getModelByImgId($img_id);
        $ext = pathinfo(ROOT_PATH.'public'.$model['img'],PATHINFO_EXTENSION);
        if (!empty($edit_crop)) {
            $aa = explode(',',$edit_crop);
            $aaa = base64_decode($aa[1]);
            $img_name = pathinfo(ROOT_PATH.'public'.$model['img'],PATHINFO_FILENAME);
            $new_name = $img_name.'_new.'.$ext;
            $a = file_put_contents(ROOT_PATH.'public/images/'.$model['model_num'].'/'.$this->uid.'/'.$new_name,$aaa);
            if (!$a){
                $result['message'] = "绘制图片失败";
            }

            $this->smallImg(ROOT_PATH.'public/images/'.$model['model_num'].'/'.$this->uid.'/'.$new_name,$ext,300,200);
            $this->imgReset(ROOT_PATH.'public/images/'.$model['model_num'].'/'.$this->uid.'/'.$new_name,$ext,$model['width'],$model['height']);

            $res = $tem->updateImgByImgId($img_id,['img'=>'/images/'.$model['model_num'].'/'.$this->uid.'/'.$new_name]);
            if ($res){
                $result['status'] = 1;
                $result['message'] = "保存成功";
                $result['data'] = '/images/'.$model['model_num'].'/'.$this->uid.'/'.$new_name;
            }
        }else{
            //判断是否为空
            if (empty($img)){
                $result['message'] = "信息为空";
                return json($result);
            }
            if ($img){
                //如果直接上传照片将上传两个地方一个个人目录下一个公共目录下，方便以后操作处理
                if ($img_id) {
                    $path = ROOT_PATH."public".DS."images".DS.$model['model_num'].DS.$this->uid;
                    $svinfo = $img->move($path);
                    if ($svinfo === false){
                        $result['message'] = "图片上传失败";
                        return json($result);
                    }
                    $currentname = $svinfo->getSaveName();

                    $uploadedfile = ROOT_PATH."public".DS."images".DS.$model['model_num'].DS.$this->uid.DS.$currentname;
                    if(!is_dir(ROOT_PATH . "public" . DS . "images" . DS . "publice" . DS . $this->uid)){
                        mkdir(ROOT_PATH . "public" . DS . "images" . DS . "publice" . DS . $this->uid);
                    }
                    $img_name = pathinfo($uploadedfile,PATHINFO_BASENAME);
                    $flg = copy($uploadedfile ,ROOT_PATH."public".DS."images".DS."publice".DS.$this->uid.DS.$img_name);
                    $this->smallImg(ROOT_PATH."public".DS."images".DS."publice".DS.$this->uid.DS.$img_name,$ext,300,200);
                    if (!$flg){
                        $result['message'] = "复制出错";
                        return json($result);
                    }
                    $publicimgpath = "/images/publice/" . $this->uid . "/" . $img_name;

                    //将图片尺寸规定到指定大小
                    $this->imgReset($uploadedfile,$ext,$model['width'],$model['height']);

                    $this->smallImg($uploadedfile,$ext,300,200);

                    $data['img'] = "/images/".$model['model_num']."/".$this->uid."/".explode('.',$currentname)[0].'.'.$ext;
                    $data['is_edit'] = 1;
                    $res = $tem->updateImgByImgId($img_id,$data);
                    if (!$res) {
                        $result['message'] = "图片信息跟新失败";
                        return json($result);
                    }
                } else {
                    //上传公共目录
                    $path = ROOT_PATH . "public" . DS . "images" . DS . "publice" . DS . $this->uid;
                    $info = $img->move($path);
                    if ($info === false) {
                        $result['message'] = "图片上传失败";
                        return json($result);
                    }
                    $savename = $info->getSaveName();
                    $data['img'] = $publicimgpath = "/images/publice/" . $this->uid . "/" . $savename;

                    $ext = pathinfo(ROOT_PATH.'public'.$publicimgpath,PATHINFO_EXTENSION);
                    list($width, $height, $type, $attr) = getimagesize(ROOT_PATH.'public'.$publicimgpath);
                    if ($width > $height){
                        $width = 1920;
                        $height = 1080;
                    }else{
                        $width = 1080;
                        $height = 1920;
                    }
                    //将图片尺寸规定到指定大小
                    $this->imgReset(ROOT_PATH.'public'.$publicimgpath,$ext,$width,$height);
                    $this->smallImg(ROOT_PATH.'public'.$publicimgpath,$ext,300,200);
                }
                $flg = $tem->addImgToPub($this->uid, $publicimgpath);
                if ($flg) {
                    $result['status'] = 1;
                    $result['message'] = "保存成功";
                    $result['data'] = $data['img'];
                    $result['thum_img'] = explode('.',$data['img'])[0].'_300200.'.explode('.',$data['img'])[1];
                }
            }
        }

        return json($result);
    }

    /**
     * @return \think\response\重回图片
     */
    public function imgReset($uploadedfile,$ext,$nwidth,$nheight)
    {
        $ext1 = pathinfo($uploadedfile,PATHINFO_EXTENSION);
        // Create an Image from it so we can do the resize
        if ($ext1 == 'jpg') {
            $src = imagecreatefromjpeg($uploadedfile);
        }else{
            $src = imagecreatefrompng($uploadedfile);
        }
        // Capture the original size of the uploaded image
        list($width, $height) = getimagesize($uploadedfile);
        // For our purposes, I have resized the image to be
        // 600 pixels wide, and maintain the original aspect
        // ratio. This prevents the image from being "stretched"
        // or "squashed". If you prefer some max width other than
        // 600, simply change the $newwidth variable
        $newwidth = $nwidth;
        $newheight = $nheight;
        $tmp = imagecreatetruecolor($newwidth, $newheight);
        // this line actually does the image resizing, copying from the original
        // image into the $tmp image
        imagecopyresampled($tmp, $src, 0, 0, 0, 0, $newwidth, $newheight, $width, $height);
        // now write the resized image to disk. I have assumed that you want the
        // resized, uploaded image file to reside in the ./images subdirectory.
      $filename_arr = explode('.',$uploadedfile);
      $f_count = count($filename_arr);
      $filename = str_replace($filename_arr[$f_count-1],$ext,$uploadedfile);
        if ($ext == 'jpg') {
            imagejpeg($tmp, $filename, 90);
        }else{
            imagepng($tmp, $filename, 9);
        }
        imagedestroy($src);
        imagedestroy($tmp);
    }

    /**
     * @return \think\response\保存缩略图
     */
    public function smallImg($uploadedfile,$ext,$nwidth,$nheight)
    {
        $ext1 = pathinfo($uploadedfile,PATHINFO_EXTENSION);
        // Create an Image from it so we can do the resize
        if ($ext1 == 'jpg') {
            $src = imagecreatefromjpeg($uploadedfile);
        }else{
            $src = imagecreatefrompng($uploadedfile);
        }
        // Capture the original size of the uploaded image
        list($width, $height) = getimagesize($uploadedfile);
        // For our purposes, I have resized the image to be
        // 600 pixels wide, and maintain the original aspect
        // ratio. This prevents the image from being "stretched"
        // or "squashed". If you prefer some max width other than
        // 600, simply change the $newwidth variable
        $newwidth = $nwidth;
        $newheight = $nheight;
        $tmp = imagecreatetruecolor($newwidth, $newheight);
        // this line actually does the image resizing, copying from the original
        // image into the $tmp image
        imagecopyresampled($tmp, $src, 0, 0, 0, 0, $newwidth, $newheight, $width, $height);
        // now write the resized image to disk. I have assumed that you want the
        // resized, uploaded image file to reside in the ./images subdirectory.
        $filename_arr = explode('.',$uploadedfile);
        $f_count = count($filename_arr);
        $filename = str_replace('.'.$filename_arr[$f_count-1],'_300200.'.$ext1,$uploadedfile);
        if ($ext1 == 'jpg') {
            imagejpeg($tmp, $filename, 90);
        }else{
            imagepng($tmp, $filename, 9);
        }
        imagedestroy($src);
        imagedestroy($tmp);
    }

    /**
     * 获取图片
     */
    public function getMaterial()
    {
        $img = input('material','','string');

        $tem = new Template();
        $map['img'] = $img;
        $image = $tem->getOneImage($map);

        return json($image);
    }

    public function webUpload()
    {
        return json(['host'=>'/index/member/saveImage/img_id/','dir'=>'/images/']);
    }

    /**
     * 删除视频
     */
    public function delWork()
    {
        $result = ['message'=>"删除失败",'status'=>0];

        $id = input('id',0,'int');
        if (!$id) {
            $result['message'] = "视频编号不能为空";
            return json($result);
        }

        $tem = new Template();
        $product = $tem->getOneById($id);
        if (empty($product)) {
            $result['message'] = "没有该视频";
            return json($result);
        }

        $data['status'] = 2;
        $res = $tem->upOneById($id,$data);
        if (!$res) {
            $result['message'] = "删除失败";
            return json($result);
        }

        $result['status'] = 1;
        $result['message'] = "删除成功";
        return json($result);
    }

    /**
     * 重新渲染视频
     */
    public function vedioRestart()
    {
        $result = ['error'=>1,'message'=>"该视频不存在"];
        $id = input('id',0,'int');

        if (!$id){
            return json($result);
        }
        $tem  = new Template();
        $res = $tem->upOneById($id,['status'=>1]);
        if ($res) {
            $result['error'] = 0;
            $result['message'] = "重新渲染成功";
        }

        return json($result);
    }

    /**
     * 查询是否有为编辑的内容
     */
    public function serchNoEdit()
    {
        $result = ['msg'=>"HAVE ERROR",'status'=>0];
        $id = input('id',0,'int');
        if (!$id) {
            $result['msg'] = "NO ID";
            return json($result);
        }

        $tem = new Template();
        $flg = $tem->findNoEditImg($id);
        if (!empty($flg)) {
            $result['msg'] = "视频编辑尚未完成";
            return json($result);
        }

        $result['msg'] = "视频编辑完成";
        $result['status'] = 1;
        return json($result);
    }

    /**
     * 跟新渲染状态
     */
    public function render()
    {
        $result = ['msg'=>"HAVE ERROR",'status'=>0];
        $id = input('id',0,'int');
        $code = input('code',0,'int');
        $vedio_name = input('vedio_name','','string');
        //编辑完成 更改数据库状态
        $data['status'] = 1;
        $data['code'] = $code;
        $data['vedio_name'] = $vedio_name;
        $data['update_time'] = time();
        $tem = new Template();
        $codeM = new CodeModel();
        $is_code = $codeM->getCodeInfoByCode($code);
        if (empty($is_code)) {
            $result['msg'] = "请输入正确的激活码";
            return json($result);
        }
        $codeM->updateCodeInfo($code,['status'=>1,'update_time'=>time(),'productid'=>$id]);
        $res = $tem->upOneById($id,$data);
        if ($res) {
            $result['msg'] = "视频已经添加到队列中，可能需要等待十分钟到一小时，请耐心等待!";
            $result['status'] = 1;
        }
        return json($result);
    }

    /**
     * 视频展示
     */
    public function vedioShow()
    {
        $id = input('productid',0,'int');

        $tem = new Template();
        $my_product = $tem->getOneById($id);
        $this->assign('product',$my_product);
        return view('vedio');
    }

    /**
     * 获取客户上传图片
     */
    public function materials()
    {
        $tem = new Template();
        $imgs = $tem->getAllPubliceImg($this->uid);
        $content = "<h2>我的图片</h2><div class=\"cmt clearfix\" id=\"ossfile\">";
        if (!empty($imgs)) {
            foreach ($imgs as $key=>$value) {
                $img_arr = explode('.',$value['img']);
                $content .= "<div class=\"zprt my-image\" data-new_source='".$value['img']."' data-id='".$value['id']."'>
                            <img src='".$img_arr[0].'_300200.'.$img_arr[1]."'>
                            <img _src='".$value['img']."' style='display: none'>
                            <i onclick=\"delImg(this)\">×</i>
                            </div>";
            }
        }else{
            $content .= "<div class=\"materials-tips\" id=\"materials-tip\"> 支持批量上传图片哟~</div>";
        }
        $content .= "</div>";
        if (!empty($imgs)) {
            $content .= "<div class=\"btns\" id=\"container\" style='bottom: 50px;'><button onclick='insertImg();' style='display: block;height: 30px;line-height: 30px;border-radius: 20px;background: #4dd3c5;text-align: center;color: #fff;font-size: 14px;width: 100px'>一键填充图片</button></div> ";
        }
        $content .= "<div class=\"btns\" id=\"container\"><a href=\"javascript:void(0);\" id=\"selectfiles\" title=\"请上传jpg或png格式的图片\">批量上传图片</a> 
                    <a href=\"javascript:void(0);\" id=\"waiting\" class=\"wmxuploadbtn\" style=\"display: none\"><i>上传中……</i></a></div>
                    <script>
                        $('#selectfiles').tipsy({
                            gravity: 's',
                            offset: 5
                       });	//web直传至alioss
                    var uploader = new plupload.Uploader({
                    runtimes : 'html5,flash,silverlight,html4',
                    browse_button : 'selectfiles',
                    //multi_selection: false,
                    container: document.getElementById('container'),
                    flash_swf_url : '/static/index/other/Moxie.swf',
                    silverlight_xap_url : '/static/index/other/Moxie.xap',
                    url : 'http://oss.aliyuncs.com',
                    filters: {
                        mime_types : [ //只允许上传图片r文件
                             { title : \"Image files\", extensions : \"jpg,jpeg,png\" }
                        ],
                        max_file_size : '20mb', //最大只能上传20mb的文件
                        prevent_duplicates : true //不允许选取重复文件
                     },
                    resize: {
                        height: 2048,
                        quality: 100,
                        crop: false,
                        preserve_headers: false
                    },
                    init: {
                        PostInit: function() {
                            /*document.getElementById('ossfile').innerHTML = '';
                            document.getElementById('postfiles').onclick = function() {
                            set_upload_param(uploader, '', false);
                            return false;
                            };*/
                            },FilesAdded: function(up, files) {
                            var files_count = files.length;
                            plupload.each(files, function(file, i) {
                                if (!file || !/image\//.test(file.type)) return;
                                var ele_ossfile = document.getElementById('ossfile');
                                if (file.type === 'image/gif') {
                                    //gif使用FileReader进行预览,因为mOxie.Image只支持jpg和png
                                    var fr = new mOxie.FileReader();
                                    fr.onload = function () {
                                        var imgsrc = fr.result;
                                        var materials_tip = document.getElementById('materials-tip');
                                        if(materials_tip !== null) ele_ossfile.removeChild(materials_tip);
                                        var ossfile_html = ele_ossfile.innerHTML;
                                        ele_ossfile.innerHTML = '<div class=\"zprt\" id=\"' + file.id + '\">' + '<img src=\"' + imgsrc + '\"><i>×</i>'
                                                                + '<div class=\"scbar\"><span>上传中 <em>0%</em></span><ins><em></em></ins><b>×</b></div>'
                                                                + '</div>' + ossfile_html;
                                        //console.log(fr);
                                        // fr.destroy();
                                        fr = null;
                                        if (i === files_count - 1) {
                                            document.getElementById('waiting').style.display = \"block\";
                                            document.getElementById('selectfiles').style.display = \"none\";
                                            set_upload_param(uploader, '', false);
                                        }
                                    };
                                    fr.readAsDataURL(file.getSource());
                                } else {
                                    var preloader = new mOxie.Image();
                                    preloader.onload = function () {
                                        if (preloader.height <= 10000 && preloader.width <= 10000) {
                                            var materials_tip = document.getElementById('materials-tip');
                                            if(materials_tip !== null) ele_ossfile.removeChild(materials_tip);
                                            preloader.downsize(120, 80);//先压缩一下要预览的图片
                                            var imgsrc = preloader.type == 'image/jpeg' ? preloader.getAsDataURL('image/jpeg', 80) : preloader.getAsDataURL(); //得到图片src,实质为一个base64编码的数据
                                            // /*console.log(imgsrc);*/
                                            var ossfile_html = ele_ossfile.innerHTML;
                                            ele_ossfile.innerHTML = '<div class=\"zprt\" id=\"' + file.id + '\">' + '<img src=\"' + imgsrc + '\"><i>×</i>'
                                                                    + '<div class=\"scbar\"><span>上传中 <em>0%</em></span><ins><em></em></ins><b>×</b></div>'
                                                                    + '</div>' + ossfile_html;
                                            //file.imgsrc = imgsrc;
                                            preloader.destroy();
                                            preloader = null;
                                            if (i === files_count - 1) {
                                                document.getElementById('waiting').style.display = \"block\";
                                                document.getElementById('selectfiles').style.display = \"none\";
                                                set_upload_param(uploader, '', false,0);
                                            }
                                        } else {
                                            //file.imgsrc = imgsrc;
                                            preloader.destroy();
                                            preloader = null;
                                            diybox.alert('文件“' + file.name + '”宽或高超过10000，请处理后再上传', function () {
                                                loadMaterials();
                                            });
                                        }
                                    };
                                    preloader.load(file.getSource());
                                }
                            });
                        },
                        BeforeUpload: function(up, file) {
                            set_upload_param(up, file.name, true,0);
                            },
                        UploadProgress: function(up, file) {
                            var d = document.getElementById(file.id);
                            /*d.getElementsByTagName('b')[0].innerHTML = '<span>' + file.percent + \"%</span>\";*/
                            if(d !== null) {
                                var prog = d.getElementsByTagName('div')[0];
                                var progTxt = prog.getElementsByTagName('span')[0];
                                progTxt.getElementsByTagName('em')[0].innerHTML = file.percent + '%';
                                var progContainer = prog.getElementsByTagName('ins')[0];
                                var progBar = progContainer.getElementsByTagName('em')[0];
                                progBar.style.width = file.percent + '%';
                                progBar.setAttribute('aria-valuenow', file.percent);
                            }
                        },
                        FileUploaded: function(up, file, info) {
                            if (info.status == 200) {
                                var upload_file = get_uploaded_object_name(file.name);
                               /* $.ajax({
                                    type: \"POST\",
                                    async: false,
                                    url: \"/member/material/scanImage\",
                                    data: {'filename': upload_file},
                                    dataType: \"json\",
                                    success: function(data){
                                        save_image(upload_file);
                                    }
                                });*/
                                /*console.log(response);*/
                                /*document.getElementById(file.id).getElementsByTagName('b')[0].innerHTML = 'upload to oss success, object name:' + get_uploaded_object_name(file.name);*/
                            } else {
                                /*document.getElementById(file.id).getElementsByTagName('b')[0].innerHTML = info.response;*/
                            }
                        },
                        UploadComplete:function(){
                            //document.getElementById('selectfiles').style.display = \"block\";
                            // document.getElementById('waiting').style.display = \"none\";
                            loadMaterials();
                            },
                        Error: function(up, err) {
                            if (err.code == -600) {
                                /*document.getElementById('console').appendChild(document.createTextNode(\"\n选择的文件太大了,可以根据应用情况，在upload.js 设置一下上传的最大大小\"));*/
                            }else if (err.code == -601) {
                                /*document.getElementById('console').appendChild(document.createTextNode(\"\n选择的文件后缀不对,可以根据应用情况，在upload.js进行设置可允许的上传文件类型\"));*/
                            }else if (err.code == -602) {
                                /*document.getElementById('console').appendChild(document.createTextNode(\"\n这个文件已经上传过一遍了\"));*/
                            }else{
                                /*document.getElementById('console').appendChild(document.createTextNode(\"\nError xml:\" + err.response));*/
                            }
                        }
                    }
               });
                uploader.init();
                function delImg(_obj){
                    diybox.confirm({
                        message: '您确认删除这张图片吗？',
                        closeBtn: false,
                        yes: function () {
                            var img_id = $(_obj).parent().attr('data-id');
                            $.post('/index/member/deleteMaterial', {'id': img_id}, function(response){
                                if(response.error){
                                    diybox.alert(response.message);
                                    return false;
                                }
                                //diybox.msg(response.msg, 1500);
                                loadMaterials();
                            }, 'json');
                        }
                    });
                    return false;
                }
            </script>";
        $content .= "<script>
                        function insertImg() {
                          var imgArr = new Array();
                           $('.my-image').each(function(index) {
                             imgArr[index] = $(this).find('img').eq(1).attr('_src');
                           });
                           $.post('/index/member/oneKeyInImg',{'img':imgArr,'productid':temp_id,'model_num':model_num},function(respons) {
                             if (respons.error){
                                 diybox.alert(respons.message);
                                 return false;
                             }
                             location.reload();
                           },'json');
                        }
                    </script>";
        return ['data'=>$content];
    }

    /**
     * 一键上传图片
     */
    public function oneKeyInImg()
    {
        $result = ['error'=>1,'message'=>"插入失败"];
        $img_arr = input('img/a');
        $productid = input('productid',0,'int');
        $model_id = input('model_num',0,'int');

        $tem = new Template();
        $old_img = $tem->getAllOldImg($productid);
        $num = count($old_img)>count($img_arr)?count($img_arr):count($old_img);
        for ($i = 0; $i < $num; ++$i){
            $uploadedfile = ROOT_PATH.'public/'.$img_arr[$i];
            $img_name = pathinfo($uploadedfile,PATHINFO_BASENAME);
            if (!file_exists(ROOT_PATH.'public/images/'.$model_id.'/'.$this->uid)) {
                mkdir(ROOT_PATH.'public/images/'.$model_id.'/'.$this->uid);
            }
            $flg = copy($uploadedfile ,ROOT_PATH.'public/images/'.$model_id.'/'.$this->uid.'/'.$img_name);
            $this->smallImg(ROOT_PATH.'public/images/'.$model_id.'/'.$this->uid.'/'.$img_name,'',300,200);
            $tem->updateImgByImgId($old_img[$i]['id'],['img'=>'/images/'.$model_id.'/'.$this->uid.'/'.$img_name,'is_edit'=>1]);
        }

        $result['error'] = 0;
        $result['message'] = "插入成功";
//        var_exp($productid);die();
        return json($result);
    }

    /**
     * 拖动图片
     */
    public function replaceImg ()
    {
        $result = ['error'=>1,'data'=>"更换失败"];
        $source = input('object','','string');
        $old_source = input('source','','string');
        $img_id = input('img_id',0,'int');
        $type = input('type');
        $width = input('rw',0,'int');
        $height = input('rh',0,'int');
        $tem = new Template();
        $model = $tem->getModelByImgId($img_id);
        $ext11 = $ext = pathinfo(ROOT_PATH.'public'.$model['img'],PATHINFO_EXTENSION);
//        var_exp($ext11);die();
        if ($type){
            if ($source == $old_source) {
                $data['img'] = $source;
                $data['is_edit'] = 0;
                $res = $tem->updateImgByImgId($img_id,$data);
            }else{
                $data['img'] = $source;
                $data['is_edit'] = 1;
                $res = $tem->updateImgByImgId($img_id,$data);
            }
        }else{
            if (!is_dir(ROOT_PATH.'public/images/'.$model['model_num'].'/'.$this->uid)) {
                mkdir(ROOT_PATH.'public/images/'.$model['model_num'].'/'.$this->uid);
            }
            $img_name = pathinfo(ROOT_PATH.'public'.$source,PATHINFO_BASENAME);

            if ($model['img'] == '/images/'.$model['model_num'].'/'.$this->uid.'/'.$img_name) {
                $result['data'] = "图片相同请勿重复上传";
                return json($result);
            }

            $file_name = pathinfo(ROOT_PATH.'public'.$source,PATHINFO_FILENAME);
            $ext = pathinfo(ROOT_PATH.'public'.$source,PATHINFO_EXTENSION);
            $num = rand(1,9999);
            if (file_exists(ROOT_PATH.'public/images/'.$model['model_num'].'/'.$this->uid.'/'.$img_name)){
                $flg = copy(ROOT_PATH.'public'.$source ,ROOT_PATH.'public/images/'.$model['model_num'].'/'.$this->uid.'/'.$file_name.'_'.$num.'.'.$ext);
                if (!$flg){
                    $result['data'] = "复制出错";
                    return json($result);
                }
                //将图片尺寸规定到指定大小
                $this->imgReset(ROOT_PATH.'public/images/'.$model['model_num'].'/'.$this->uid.'/'.$file_name.'_'.$num.'.'.$ext,$ext11,$width,$height);

                $this->smallImg(ROOT_PATH.'public/images/'.$model['model_num'].'/'.$this->uid.'/'.$file_name.'_'.$num.'.'.$ext,$ext11,300,200);

                $path = "/images/". $model['model_num'] . "/" . $this->uid . "/" . $file_name.'_'.$num.'.'.$ext;
            }else{
                $flg = copy(ROOT_PATH.'public'.$source ,ROOT_PATH.'public/images/'.$model['model_num'].'/'.$this->uid.'/'.$img_name);
                if (!$flg){
                    $result['data'] = "复制出错";
                    return json($result);
                }
                //将图片尺寸规定到指定大小
                $this->imgReset(ROOT_PATH.'public/images/'.$model['model_num'].'/'.$this->uid.'/'.$img_name,$ext11,$width,$height);

                $this->smallImg(ROOT_PATH.'public/images/'.$model['model_num'].'/'.$this->uid.'/'.$img_name,$ext11,300,200);

                $path = "/images/". $model['model_num'] . "/" . $this->uid . "/" . explode('.',$img_name)[0].'.'.$ext11;
            }
            if ($ext11 != $ext) {
                unlink(ROOT_PATH.'public/images/'.$model['model_num'].'/'.$this->uid.'/'.$img_name);
            }
            $res = $tem->updateImgByImgId($img_id,['img'=>$path,'is_edit'=>1]);
        }
        if (!$res){
            $result['data'] = "更新出错";
            return json($result);
        }
        $img = $tem->getOneImage(['id'=>$img_id]);
        $result['data'] = $img['img'];
        $result['source'] = $img['img'];
        $result['thum_img'] = explode('.',$img['img'])[0].'_300200.'.explode('.',$img['img'])[1];
        $result['error'] = 0;
//        $result['crop'] =
        return json($result);
    }

    /**
     * 图片排序
     */
    public function sortImg()
    {
        $result = ['error'=>1,'message'=>"移动失败"];
        $to_image = input('to_img',''.'string');
        $to_img_id = input('to_img_id',0,'int');
        $from_image = input('from_img','','string');
        $from_img_id = input('from_img_id',0,'int');
//        var_exp(input('post.'));
        $tem = new Template();
        $res = $tem->updatePublicImg($to_img_id,['img'=>$from_image]);
        $flg = $tem->updatePublicImg($from_img_id,['img'=>$to_image]);
        if ($res && $flg) {
            $result['error'] = 0;
            $result['message'] = "成功";
        }
        $to_source = $tem->getOnePublicImg($to_img_id);
        $from_source = $tem->getOnePublicImg($from_img_id);

        $result['to_source'] = $to_source['img'];
        $result['to_thum_img'] = explode('.',$to_source['img'])[0].'_300200.'.explode('.',$to_source['img'])[1];
        $result['from_source'] = $from_source['img'];
        $result['from_thum_img'] = explode('.',$from_source['img'])[0].'_300200.'.explode('.',$from_source['img'])[1];

        return json($result);
    }

    /**
     * 删除公共图片
     */
    public function deleteMaterial()
    {
        $result = ['error'=>1,'message'=>"删除失败"];
        $id = input('id',0,'int');

        if (!$id){
            $result['message'] = "NO ID";
            return json($result);
        }

        $tem = new Template();
        $flg = $tem->delOnePubImg($id);
        if ($flg){
            $result['error'] = 0;
            $result['message'] = "SUCCESS";
        }
        return json($result);
    }

    /**
     * 上传音乐
     */
    public function musics()
    {
        //查看所有上传的音乐
        $tem  = new Template();
        $music = $tem->getUserAllMusic($this->uid);
        $str = "<ul id='music-list'>";
        if (!empty($music)) {
            foreach ($music as $k=>$v){
                $str .= "<li class='music-li' id='music-".$v['id']."' data-music='".$_SERVER['SERVER_NAME'].$v['msc']."'
                        data-file='{$v['msc']}' data-id='{$v['id']}' data-length='2:15'>
                        <a class='private-music' href='javascript:void(0);' onclick='music_play(this)' title='{$v['name']}'>{$v['name']}</a>
                        <ins onclick='add_bgm(this)'><i class='icon-plus tips' title='设为背景音乐'></i></ins>
                        <ins onclick='delete_music(this)'><i class='icon-remove tips' title='删除音乐'></i></ins>
                 </li>";
            }

        }
        $str .= "</ul>
                <script>
                    $('.tips').tipsy({gravity: 's'});
                    var music_uploader = new plupload.Uploader({
                        runtimes : 'html5,flash,silverlight,html4',
                        browse_button : 'upload-music',
                        multi_selection: false,
                        container: document.getElementById('music-container'),
                        flash_swf_url : '/data/static/lib/plupload-2.1.2/js/Moxie.swf',
                        silverlight_xap_url : '/data/static/lib/plupload-2.1.2/js/Moxie.xap',
                        url : '/index/member/uploadMsc',
                        filters: {
                            mime_types : [ //只允许上传图片r文件
                                { title : \"Audio files\", extensions : \"mp3\" }
                                ],
                            //max_file_size : '11mb', //最大只能上传20mb的文件
                            prevent_duplicates : true //不允许选取重复文件
                        },
                        init: {
                            PostInit: function() {
                                /*document.getElementById('ossfile').innerHTML = '';
                                document.getElementById('postfiles').onclick = function() {
                                set_upload_param(uploader, '', false);
                                return false;
                                };*/
                            },
                            FilesAdded: function(up, files) {
                                plupload.each(files, function(file, i) {
                                    var files_count = files.length;
                                    if (!file || !/audio\//.test(file.type)) return;
                                    if(file.size < 10485760){
                                        /*console.log(imgsrc);*/
                                        var music_html = document.getElementById('music-list').innerHTML;
                                        document.getElementById('music-list').innerHTML = '<li><a href=\"javascript:void(0);\" title=\"' + file.name + '\">上传中-' + file.name + '</a></li>' + music_html;
                                        if(i === files_count - 1) {
                                            document.getElementById('waiting-music').style.display = \"block\";
                                            document.getElementById('upload-music').style.display = \"none\";
                                            music_uploader.start();
                                        }
                                    }else{
                                        diybox.alert('文件“' + file.name + '”大小超过10Mb，请处理后再上传', function(){
                                            music_uploader.destroy();
                                            loadPrivateMusics();
                                        });
                                        music_uploader.destroy();
                                    }
                                });
                            },
                            BeforeUpload: function(up, file) {
                
                            },
                            UploadProgress: function(up, file) {
                                var d = document.getElementById('waiting-music');
                                d.getElementsByTagName('i')[0].innerHTML = '上传中' + file.percent + '%……';
                                var prog = d.getElementsByTagName('div')[0];
                                prog.style.width = file.percent + '%';
                                if(file.percent === 100){
                                    d.getElementsByTagName('i')[0].innerHTML = '音乐处理中……';
                                }
                            },
                            FileUploaded: function(up, file, info) {
                                if (info.status === 200) {
                                    var response = eval(\"(\" + info.response + \")\");
                                    if(response.error){
                                        diybox.alert(response.msg);
                                    }else{
                                        diybox.msg(response.msg);
                                    }
                                    //var response = save_image(get_uploaded_object_name(file.name));
                                    /*console.log(response);*/
                                    /*document.getElementById(file.id).getElementsByTagName('b')[0].innerHTML = 'upload to oss success, object name:' + get_uploaded_object_name(file.name);*/
                                }else{
                                    /*document.getElementById(file.id).getElementsByTagName('b')[0].innerHTML = info.response;*/
                                }
                            },
                            UploadComplete:function(){
                                //document.getElementById('selectfiles').style.display = \"block\";
                                // document.getElementById('waiting').style.display = \"none\";
                                music_uploader.destroy();
                                loadPrivateMusics();
                                document.getElementById('waiting-music').style.display = \"none\";
                                document.getElementById('upload-music').style.display = \"block\";
                            },
                            Error: function(up, err) {
                                if (err.code === -600) {
                                    /*document.getElementById('console').appendChild(document.createTextNode(\"\n选择的文件太大了,可以根据应用情况，在upload.js 设置一下上传的最大大小\"));*/
                                }else if (err.code === -601) {
                                    /*document.getElementById('console').appendChild(document.createTextNode(\"\n选择的文件后缀不对,可以根据应用情况，在upload.js进行设置可允许的上传文件类型\"));*/
                                }else if (err.code === -602) {
                                    /*document.getElementById('console').appendChild(document.createTextNode(\"\n这个文件已经上传过一遍了\"));*/
                                }else{
                                    /*document.getElementById('console').appendChild(document.createTextNode(\"\nError xml:\" + err.response));*/
                                }
                            }
                        }
                    });
                    music_uploader.init();    /**	 * 删除音乐(加上confirm提示)     * @param _obj     */
                    function delete_music(_obj){
                        diybox.confirm({
                            message: '您确认删除这条音乐吗(<span style=\"color: red;\">若为背景音乐将重置为默认音乐</span>)？',
                            closeBtn: false,
                            yes: function(){
                                var music_id = $(_obj).parent().attr('data-id');
                                $.post('/index/member/deleteMusic', {'id': music_id}, function(response){
                                    if(response.error){
                                        diybox.alert(response.msg);
                                        return false;
                                    }
                                    //diybox.msg(response.msg, 1500);
                                    document.getElementById('player').src = '';
                                    music_uploader.destroy();
                                    loadPrivateMusics();
                                    if (temp_bgm === parseInt(music_id)){
                                        rec_bgm();
                                    }
                                }, 'json');
                            }
                        });
                    }
                </script>";
        return ['data'=>$str];
    }

    /**
     * public music
     */
    public function publicMusics()
    {
        $tem = new Template();
        $public_music = $tem->getAllPubliceMusic();
        $str = "<dl class='clearfix' id='public-music-nav' style='display:none'>
                    <dd data-content='music-cate-wedding' class='on'><a href='javascript:void(0);'>婚礼</a></dd>
                    <dd data-content='music-cate-kids'><a href='javascript:void(0);'>童趣</a></dd>
                    <dd data-content='music-cate-business'><a href='javascript:void(0);'>商务</a></dd>
                    <dd data-content='music-cate-young'><a href='javascript:void(0);'>青春</a></dd>
                </dl>
                <ul class='public-music-list' id='music-cate-wedding'>";
        if (!empty($public_music)){
            foreach ($public_music as $k=>$v){
                $str .= " <li class='music-li' id='music-{$v['id']}' data-music='".$_SERVER['HTTP_HOST'].'/'.$v['msc']."'
                        data-file='{$v['msc']}' data-id='{$v['id']}' data-length='4:04'>
                        <a href='javascript:void(0);' onclick='music_play(this)' title='{$v['name']}'>{$v['name']}</a>
                        <ins onclick='add_bgm(this)'><i class='icon-plus tips' title='设为背景音乐'></i></ins>
                    </li>";
            }
        }
        $str .= "</ul>";
        return ['data'=>$str];
    }

    /**
     * 保存音乐
     */
    public function saveBgm()
    {
        $bgm_id = input('bgm',0,'int');
        $productid = input('id',0,'int');
        if (!$productid) {
            return json(['error'=>1,'msg'=>"视频不存在"]);
        }

        $tem = new Template();
        if ($bgm_id == 0) {
            $tem->deletProductBgm($productid);
            return json(['error'=>1,'msg'=>"重置成功"]);
        }
        //查找是否已经又背景音乐
        $info = $tem->getProductBgm($productid);
        $msc_info = $tem->getOneMusicById($bgm_id);
        if (!empty($info)) {
            //跟新
            $res = $tem->updateProductBgmById($productid,['productid'=>$productid,'name'=>$msc_info['name'],'msc'=>$msc_info['msc']]);
        }else{
            //添加
            $res = $tem->addProductBgmById(['productid'=>$productid,'name'=>$msc_info['name'],'productid'=>$productid,'msc'=>$msc_info['msc']]);
        }
        if ($res) {
            return json(['error'=>0,'msg'=>"设置成功"]);
        }else{
            return json(['error'=>1,'msg'=>"设置失败"]);
        }
    }

    /**
     * 上传音乐
     */
    public function uploadMsc()
    {
        $music = $this->request->file('file');
        $name = $music->getInfo()['name'];
        $msc_path = ROOT_PATH.'public/music/'.$this->uid;
        $save_info = $music->move($msc_path);
        $save_name = $save_info->getSaveName();

        $tem = new Template();
        $data['msc'] = '/music/'.$this->uid.'/'.$save_name;
        $data['userid'] = $this->uid;
        $data['name'] = explode('.',$name)[0];
        $res = $tem->userAddPublicMusic($data);
        if ($res){
            return json(['error'=>0,'msg'=>"上传成功"]);
        }else{
            return json(['error'=>1,'msg'=>"上传失败"]);
        }
    }

    /**
     * 删除背景音乐
     */
    public function deleteMusic()
    {
        $id = input('id',0,'int');

        $tem = new Template();
        $res = $tem->deletBgmById($id);
        if ($res){
            return json(['error'=>0,'msg'=>"删除成功"]);
        }else{
            return json(['error'=>1,'msg'=>"删除失败"]);
        }
    }

}